library(parallel)
detectCores()
detectCores(logical=F)
detectCores(logical=T)
getwd()
setwd("C:\Users\rewki\Documents\WJ_codes\LTM_heritability\Online_supp")
setwd("C:\\Users\\rewki\\Documents\\WJ_codes\\LTM_heritability\\Online_supp")
source("LTMH_Sourcecode.R")
dataset <- read.table("Random_sp.txt",head=T,stringsAsFactor=F)
V <- read.table("Random_kinship.txt",head=F)
LTMH(model=Y~snp-1,
data=dataset,
init_h2=0.4,
V=V,
famid=dataset$FID,
prev=0.1)
V <- as.matrix(read.table("Random_kinship.txt",head=F))
LTMH(model=Y~snp-1,
data=dataset,
init_h2=0.4,
V=V,
famid=dataset$FID,
prev=0.1)
V[1:10,1:10]
source("LTMH_Sourcecode.R")
dataset <- read.table("Random_sp.txt",head=T,stringsAsFactor=F)
V <- as.matrix(read.table("Random_kinship.txt",head=F))
LTMH(model=Y~snp-1,
data=dataset,
init_h2=0.4,
V=V,
famid=dataset$FID,
prev=0.1)
dim(V)
if(!require(tmvtnorm))	{
install.packages("tmvtnorm")
library(tmvtnorm)
}
if(!require(parallel))	{
install.packages("parallel")
library(parallel)
}
# calculate A and B
getAB <- function(i,h2.old,beta.old,famid){
## i : family id
fam <- which(famid==i)
nn <- length(fam)			# number of family members for family i
Yi <- matrix(Y[fam],nrow=nn)		# disease status for family i
if(!is.null(X)) {
Xi <- matrix(X[fam,],nrow=nn)		# design matric for family i
} else {
Xi <- NULL
}
Vi <- V[fam,fam]			# GRM matric for family i
Si <- h2.old*Vi+(1-h2.old)*diag(nn)	# Sigma for family i
# calculating A and B
k <- which(Yi==1) # aff
kk <- which(Yi==0) # unaff
t <- qnorm(prev,0,1,lower.tail=F)
a <- rep(-Inf,nn); a[k] <- t
b <- rep(Inf,nn); b[kk] <- t
if(!is.null(X)){
para <- mtmvnorm(mean=as.vector(Xi%*%beta.old),sigma=Si,lower=a,upper=b,doComputeVariance=TRUE)
} else {
para <- mtmvnorm(mean=rep(0,nn),sigma=Si,lower=a,upper=b,doComputeVariance=TRUE)
}
Bi <- matrix(para$tmean,ncol=1)
Ai <- para$tvar+Bi%*%t(Bi)
return(list(fam=fam,a=a,b=b,Yi=Yi,Xi=Xi,Vi=Vi,nn=nn,Ai=Ai,Bi=Bi))
}
getAB_ij <- function(ij){
Yij <- Y[ij]
if(!is.null(X)) Xij <- X[ij,,drop=F]
t <- qnorm(prev,0,1,lower.tail=F)
a <- ifelse(Yij==0,-Inf,t)
b <- ifelse(Yij==0,t,Inf)
if(is.null(X)){
para <- mtmvnorm(mean=0,sigma=1,lower=a,upper=b,doComputeVariance=TRUE)
} else {
para <- mtmvnorm(mean=as.vector(Xij%*%beta.old),sigma=1,lower=a,upper=b,doComputeVariance=TRUE)
}
Bij <- matrix(para$tmean,ncol=1)
Aij <- para$tvar+Bij%*%t(Bij)
if(is.null(X)){
return(list(ij=ij,Yij=Yij,Aij=Aij,Bij=Bij))
} else {
O1ij <- t(Xij)%*%Xij
O2ij <- t(Xij)%*%Bij
return(list(ij=ij,Yij=Yij,Xij=Xij,Aij=Aij,Bij=Bij,O1ij=O1ij,O2ij=O2ij))
}
}
getELE <- function(i,resAB,h2.old){
# resAB : result of getAB
res <- resAB[[i]]
Si <- with(res,h2.old*Vi+(1-h2.old)*diag(nn))	# Sigma for family i
invSi <- solve(Si)
Ci <- with(res,-invSi%*%(Vi-diag(nn))%*%invSi)
Hi <- with(res,-2*invSi%*%(Vi-diag(nn))%*%Ci)
if(!is.null(res$Xi)){
O1 <- with(res,t(Xi)%*%invSi%*%Xi)
O2 <- with(res,t(Xi)%*%Ci%*%Xi)
O3 <- with(res,t(Xi)%*%invSi%*%Bi)
O4 <- with(res,t(Xi)%*%Ci%*%Bi)
return(list(Si=Si,invSi=invSi,Ci=Ci,Hi=Hi,O1=O1,O2=O2,O3=O3,O4=O4))
} else {
return(list(Si=Si,invSi=invSi,Ci=Ci,Hi=Hi))
}
}
getELE.0 <- function(i,resAB){
# resAB : result of getAB
res <- resAB[[i]]
Si <- invSi <- with(res,diag(nn))	# Sigma & invSigma for family i
Ci <- with(res,-(Vi-diag(nn)))
Hi <- with(res,-2*(Vi-diag(nn))%*%Ci)
if(!is.null(res$Xi)){
O1 <- with(res,t(Xi)%*%Xi)
O2 <- with(res,t(Xi)%*%Ci%*%Xi)
O3 <- with(res,t(Xi)%*%Bi)
O4 <- with(res,t(Xi)%*%Ci%*%Bi)
return(list(Si=Si,invSi=invSi,Ci=Ci,Hi=Hi,O1=O1,O2=O2,O3=O3,O4=O4))
} else {
return(list(Si=Si,invSi=invSi,Ci=Ci,Hi=Hi))
}
}
getELE.subiter <- function(i,resAB,h2.old){
# resAB : result of getAB
res <- resAB[[i]]
Si <- with(res,h2.old*Vi+(1-h2.old)*diag(nn))	# Sigma for family i
invSi <- solve(Si)
O1 <- with(res,t(Xi)%*%invSi%*%Xi)
O3 <- with(res,t(Xi)%*%invSi%*%Bi)
return(list(Si=Si,invSi=invSi,O1=O1,O3=O3))
}
tr <- function(m) sum(diag(m))
getff <- function(i){
if(!is.null(X)){
f <- with(resAB[[i]],with(resELE[[i]],-tr(invSi%*%(Vi-diag(nn)))/2-tr(Ci%*%Ai)/2+t(Xi%*%beta.hat)%*%Ci%*%(Bi-Xi%*%beta.hat/2)))
f_prime <- with(resAB[[i]],with(resELE[[i]],-tr(Ci%*%(Vi-diag(nn)))/2-tr(Hi%*%Ai)/2+t(Xi%*%F)%*%Ci%*%(Bi-Xi%*%beta.hat/2)+t(Xi%*%beta.hat)%*%Hi%*%(Bi-Xi%*%beta.hat/2)-t(Xi%*%beta.hat)%*%Ci%*%Xi%*%F/2))
} else {
f <- with(resAB[[i]],with(resELE[[i]],-tr(invSi%*%(Vi-diag(nn)))/2-tr(Ci%*%Ai)/2))
f_prime <- with(resAB[[i]],with(resELE[[i]],-tr(Ci%*%(Vi-diag(nn)))/2-tr(Hi%*%Ai)/2))
}
return(c(f,f_prime))
}
getf.01 <- function(i,h2){
if(!is.null(X)){
if(h2==0) f <- with(resAB[[i]],with(resELE[[i]],-tr(Vi-diag(nn))/2-tr(Ci%*%Ai)/2+t(Xi%*%beta.hat)%*%Ci%*%(Bi-Xi%*%beta.hat/2)))
if(h2==1) f <- with(resAB[[i]],with(resELE[[i]],-tr(invSi%*%(Vi-diag(nn)))/2-tr(Ci%*%Ai)/2+t(Xi%*%beta.hat)%*%Ci%*%(Bi-Xi%*%beta.hat/2)))
} else {
if(h2==0) f <- with(resAB[[i]],with(resELE[[i]],-tr(Vi-diag(nn))/2-tr(Ci%*%Ai)/2))
if(h2==1) f <- with(resAB[[i]],with(resELE[[i]],-tr(invSi%*%(Vi-diag(nn)))/2-tr(Ci%*%Ai)/2))
}
return(f)
}
Y <- data[,as.character(model)[2]]
h2.old <- h2.OLD <- init_h2
if(as.character(model)[3]=='-1'){
X <- NULL
} else {
X <- model.matrix(model,data)
notint <- which(colnames(X)!='(Intercept)')
if(length(notint)!=0) {
XX <- X
for(jj in notint) X[,jj] <- (XX[,jj]-mean(XX[,jj],na.rm=T))/sd(XX[,jj],na.rm=T)
}
if(as.character(model)[3]!='-1' & is.null(init_beta))
init_beta <- glm(Y~X-1,family=binomial(link=probit))$coef
beta.old <- matrix(init_beta,ncol=1)
}
model <- Y~snp-1
Y <- data[,as.character(model)[2]]
h2.old <- h2.OLD <- init_h2
if(as.character(model)[3]=='-1'){
X <- NULL
} else {
X <- model.matrix(model,data)
notint <- which(colnames(X)!='(Intercept)')
if(length(notint)!=0) {
XX <- X
for(jj in notint) X[,jj] <- (XX[,jj]-mean(XX[,jj],na.rm=T))/sd(XX[,jj],na.rm=T)
}
if(as.character(model)[3]!='-1' & is.null(init_beta))
init_beta <- glm(Y~X-1,family=binomial(link=probit))$coef
beta.old <- matrix(init_beta,ncol=1)
}
model
head(dataset)
data <- dataset
Y <- data[,as.character(model)[2]]
h2.old <- h2.OLD <- init_h2
if(as.character(model)[3]=='-1'){
X <- NULL
} else {
X <- model.matrix(model,data)
notint <- which(colnames(X)!='(Intercept)')
if(length(notint)!=0) {
XX <- X
for(jj in notint) X[,jj] <- (XX[,jj]-mean(XX[,jj],na.rm=T))/sd(XX[,jj],na.rm=T)
}
if(as.character(model)[3]!='-1' & is.null(init_beta))
init_beta <- glm(Y~X-1,family=binomial(link=probit))$coef
beta.old <- matrix(init_beta,ncol=1)
}
init_h2=0.4
init_beta <- NULL
Y <- data[,as.character(model)[2]]
h2.old <- h2.OLD <- init_h2
if(as.character(model)[3]=='-1'){
X <- NULL
} else {
X <- model.matrix(model,data)
notint <- which(colnames(X)!='(Intercept)')
if(length(notint)!=0) {
XX <- X
for(jj in notint) X[,jj] <- (XX[,jj]-mean(XX[,jj],na.rm=T))/sd(XX[,jj],na.rm=T)
}
if(as.character(model)[3]!='-1' & is.null(init_beta))
init_beta <- glm(Y~X-1,family=binomial(link=probit))$coef
beta.old <- matrix(init_beta,ncol=1)
}
n.iter = 0
epsilon = 1
n.cores=1
## Calculate A and B
resAB <- mclapply(unique(famid),getAB,beta.old=beta.old,h2.old=h2.old,famid=famid,mc.cores=n.cores)
famid <- data$FID
head(famid)
## Calculate A and B
resAB <- mclapply(unique(famid),getAB,beta.old=beta.old,h2.old=h2.old,famid=famid,mc.cores=n.cores)
prev=0.1
## Calculate A and B
resAB <- mclapply(unique(famid),getAB,beta.old=beta.old,h2.old=h2.old,famid=famid,mc.cores=n.cores)
getAB <- function(i,h2.old,beta.old,famid){
print(i)
## i : family id
fam <- which(famid==i)
nn <- length(fam)			# number of family members for family i
Yi <- matrix(Y[fam],nrow=nn)		# disease status for family i
if(!is.null(X)) {
Xi <- matrix(X[fam,],nrow=nn)		# design matric for family i
} else {
Xi <- NULL
}
Vi <- V[fam,fam]			# GRM matric for family i
Si <- h2.old*Vi+(1-h2.old)*diag(nn)	# Sigma for family i
# calculating A and B
k <- which(Yi==1) # aff
kk <- which(Yi==0) # unaff
t <- qnorm(prev,0,1,lower.tail=F)
a <- rep(-Inf,nn); a[k] <- t
b <- rep(Inf,nn); b[kk] <- t
if(!is.null(X)){
para <- mtmvnorm(mean=as.vector(Xi%*%beta.old),sigma=Si,lower=a,upper=b,doComputeVariance=TRUE)
} else {
para <- mtmvnorm(mean=rep(0,nn),sigma=Si,lower=a,upper=b,doComputeVariance=TRUE)
}
Bi <- matrix(para$tmean,ncol=1)
Ai <- para$tvar+Bi%*%t(Bi)
return(list(fam=fam,a=a,b=b,Yi=Yi,Xi=Xi,Vi=Vi,nn=nn,Ai=Ai,Bi=Bi))
}
## Calculate A and B
resAB <- mclapply(unique(famid),getAB,beta.old=beta.old,h2.old=h2.old,famid=famid,mc.cores=n.cores)
i <- "fam12"
## i : family id
fam <- which(famid==i)
nn <- length(fam)			# number of family members for family i
Yi <- matrix(Y[fam],nrow=nn)		# disease status for family i
if(!is.null(X)) {
Xi <- matrix(X[fam,],nrow=nn)		# design matric for family i
} else {
Xi <- NULL
}
Vi <- V[fam,fam]			# GRM matric for family i
Si <- h2.old*Vi+(1-h2.old)*diag(nn)	# Sigma for family i
fam
Yi
Vi
Si
# calculating A and B
k <- which(Yi==1) # aff
kk <- which(Yi==0) # unaff
t <- qnorm(prev,0,1,lower.tail=F)
a <- rep(-Inf,nn); a[k] <- t
b <- rep(Inf,nn); b[kk] <- t
if(!is.null(X)){
para <- mtmvnorm(mean=as.vector(Xi%*%beta.old),sigma=Si,lower=a,upper=b,doComputeVariance=TRUE)
} else {
para <- mtmvnorm(mean=rep(0,nn),sigma=Si,lower=a,upper=b,doComputeVariance=TRUE)
}
para <- mtmvnorm(mean=as.vector(Xi%*%beta.old),sigma=Si,lower=a,upper=b,doComputeVariance=TRUE)
class(Si)
Si
source("LTMH_Sourcecode.R")
dataset <- read.table("Random_sp.txt",head=T,stringsAsFactor=F)
V <- as.matrix(read.table("Random_kinship.txt",head=F))
LTMH(model=Y~snp-1,
data=dataset,
init_h2=0.4,
V=V,
famid=dataset$FID,
prev=0.1)
LTMH(model=Y~snp-1,
data=dataset,
init_h2=0.4,
V=V,
famid=dataset$FID,
prev=0.1)
source("LTMH_Sourcecode.R")
LTMH(model=Y~snp-1,
data=dataset,
init_h2=0.4,
V=V,
famid=dataset$FID,
prev=0.1)
LTMH(model=Y~snp-1,
data=dataset,
init_h2=0.2,
V=V,
famid=dataset$FID,
prev=0.1)
